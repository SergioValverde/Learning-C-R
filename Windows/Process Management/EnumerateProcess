#include <windows.h>
#include <stdio.h>
#include <tchar.h>
#include <psapi.h>


int PrintProcessNameAndID(DWORD pid) {

    TCHAR szProcessName[MAX_PATH] = TEXT("<unknown>");

    // Get a handle to the process.

    HANDLE hProcess = OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ,FALSE, pid);

    // Get the process name.

    if (hProcess != NULL)
    
    {
        
        HMODULE hMod;
        DWORD cbNeeded;
        
        if (EnumProcessModules(hProcess, &hMod, sizeof(hMod),&cbNeeded))
        
        {
            GetModuleBaseName(hProcess, hMod, szProcessName,sizeof(szProcessName) / sizeof(TCHAR));
        }
    
    }

    // Print the process name and identifier.

    printf("%s (PID: %d)\n", szProcessName, pid);

    // Release the handle to the process.

    CloseHandle(hProcess);
}




int main(void) {

    // Enumerar procesos

    //const int pidsize = 1024;
    DWORD lpid[1024];
    DWORD actualSize;
    

    BOOL fuction = EnumProcesses(lpid, sizeof(lpid), &actualSize);

    if (!fuction) {
        printf("Error\n");
        return 1;
    }

    // Calculate how many process identifiers were returned.

    DWORD Process;

    Process = actualSize / sizeof(DWORD);

    // Print the name and process identifier for each process.

    unsigned int i;

    for (i = 0; i < Process; i++) {

        if (lpid[i] != 0) {
            PrintProcessNameAndID(lpid[i]);
        }
        

       // PrintProcessNameAndID(lpid[i]);
        
    }

    return 0;


}

